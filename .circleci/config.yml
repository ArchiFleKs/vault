### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
# Orb 'circleci/browser-tools@1.3.0' resolved to 'circleci/browser-tools@1.3.0'
# Orb 'circleci/slack@3.2.0' resolved to 'circleci/slack@3.2.0'
version: 2
jobs:
  install-ui-dependencies:
    docker:
    - environment:
        JOBS: 2
      image: docker.mirror.hashicorp.services/cimg/node:14.12-browsers'
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          #!/bin/bash
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # installation check
          if uname -a | grep Darwin >/dev/null 2>&1; then
            if ls /Applications/*Google\ Chrome* >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is currently installed; replacing it"
                HOMEBREW_NO_AUTO_UPDATE=1 brew uninstall google-chrome >/dev/null 2>&1 || true
                $SUDO rm -rf /Applications/Google\ Chrome.app >/dev/null 2>&1 || true
              else
                echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is already installed"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          elif grep Alpine /etc/issue >/dev/null 2>&1; then
            if command -v chromium-browser >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(chromium-browser --version)is currently installed; replacing it"
                $SUDO apk del --force-broken-world chromium >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v chromium-browser)" >/dev/null 2>&1 || true
              else
                echo "$(chromium-browser --version)is already installed to $(command -v chromium-browser)"
                exit 0
              fi
            else
              echo "Google Chrome (via Chromium) is not currently installed; installing it"
            fi
          elif command -v yum >/dev/null 2>&1; then
            if command -v google-chrome >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(google-chrome --version)is currently installed; replacing it"
                $SUDO yum remove -y google-chrome-stable >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v google-chrome)" >/dev/null 2>&1 || true
              else
                echo "$(google-chrome --version)is already installed to $(command -v google-chrome)"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          else
            if command -v google-chrome >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(google-chrome --version)is currently installed; replacing it"
                $SUDO apt-get -y --purge remove google-chrome-stable >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v google-chrome)" >/dev/null 2>&1 || true
              else
                echo "$(google-chrome --version)is already installed to $(command -v google-chrome)"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          fi

          # install chrome
          if uname -a | grep Darwin >/dev/null 2>&1; then
            echo "Preparing Chrome installation for MacOS-based systems"
            # Universal MacOS .pkg with license pre-accepted: https://support.google.com/chrome/a/answer/9915669?hl=en
            CHROME_MAC_URL="https://dl.google.com/chrome/mac/stable/accept_tos%3Dhttps%253A%252F%252Fwww.google.com%252Fintl%252Fen_ph%252Fchrome%252Fterms%252F%26_and_accept_tos%3Dhttps%253A%252F%252Fpolicies.google.com%252Fterms/googlechrome.pkg"
            CHROME_TEMP_DIR="$(mktemp -d)"
            curl -L -o "$CHROME_TEMP_DIR/googlechrome.pkg" "$CHROME_MAC_URL"
            sudo /usr/sbin/installer -pkg "$CHROME_TEMP_DIR/googlechrome.pkg" -target /
            sudo rm -rf "$CHROME_TEMP_DIR"
            xattr -rc "/Applications/Google Chrome.app"
            echo '#!/usr/bin/env bash' >> google-chrome
            echo '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome "$@"' >> google-chrome
            sudo mv google-chrome /usr/local/bin/
            sudo chmod +x /usr/local/bin/google-chrome
            # test/verify installation
            if google-chrome --version >/dev/null 2>&1; then
              echo "$(google-chrome --version)has been installed in the /Applications directory"
              echo "A shortcut has also been created at $(command -v google-chrome)"
              exit 0
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          elif command -v yum >/dev/null 2>&1; then
            echo "Preparing Chrome installation for RedHat-based systems"
            # download chrome
            if [[ "$ORB_PARAM_CHROME_VERSION" == "latest" ]]; then
              CHROME_URL="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
            else
              CHROME_URL="https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$ORB_PARAM_CHROME_VERSION-1.x86_64.rpm"
            fi
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome.rpm \
              "$CHROME_URL"
            curl --silent --show-error --location --fail --retry 3 \
              --output liberation-fonts.rpm \
              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm
            $SUDO yum localinstall -y liberation-fonts.rpm \
              >/dev/null 2>&1
            $SUDO yum localinstall -y google-chrome.rpm \
              >/dev/null 2>&1
            rm -rf google-chrome.rpm liberation-fonts.rpm
          else
            # download chrome
            echo "Preparing Chrome installation for Debian-based systems"
            if [[ "$ORB_PARAM_CHROME_VERSION" == "latest" ]]; then
              ENV_IS_ARM=$(! dpkg --print-architecture | grep -q arm; echo $?)
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | $SUDO apt-key add -
              if [ "$ENV_IS_ARM" == "arm" ]; then
                echo "Installing Chrome for ARM64"
                $SUDO sh -c 'echo "deb [arch=arm64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              else
                echo "Installing Chrome for AMD64"
                $SUDO sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              fi
              $SUDO apt-get update
              $SUDO apt-get install -y google-chrome-stable
            else
              # Google does not keep older releases in their PPA, but they can be installed manually. HTTPS should be enough to secure the download.
              wget --no-verbose -O /tmp/chrome.deb "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${ORB_PARAM_CHROME_VERSION}-1_amd64.deb" \
                && $SUDO apt-get install -y /tmp/chrome.deb \
                && rm /tmp/chrome.deb
            fi
            $SUDO sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' "/opt/google/chrome/google-chrome"
          fi

          # test/verify installation
          if [[ "$ORB_PARAM_CHROME_VERSION" != "latest" ]]; then
            if google-chrome --version | grep "$ORB_PARAM_CHROME_VERSION" >/dev/null 2>&1; then
              :
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          else
            if google-chrome --version >/dev/null 2>&1; then
              :
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
            echo "$(google-chrome --version) has been installed to $(command -v google-chrome)"
            echo "Chrome: $ORB_PARAM_CHROME_VERSION" >>"${HOME}/.browser-versions"
          fi
        environment:
          ORB_PARAM_CHROME_VERSION: latest
          ORB_PARAM_REPLACE_EXISTING: false
        name: Install Google Chrome
    - run:
        command: |
          #!/bin/bash
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # determine_chrome_version
          if uname -a | grep Darwin >/dev/null 2>&1; then
            echo "System detected as MacOS"
            CHROME_VERSION="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)"
            PLATFORM=mac64

          elif grep Alpine /etc/issue >/dev/null 2>&1; then
            apk update >/dev/null 2>&1 &&
              apk add --no-cache chromium-chromedriver >/dev/null

            # verify version
            echo "$(chromedriver --version) has been installed to $(command -v chromedriver)"

            exit 0
          else
            CHROME_VERSION="$(google-chrome --version)"
            PLATFORM=linux64
          fi

          CHROME_VERSION_STRING="$(echo "$CHROME_VERSION" | sed 's/.*Google Chrome //' | sed 's/.*Chromium //')"

          # print Chrome version
          echo "Installed version of Google Chrome is $CHROME_VERSION_STRING"

          # determine chromedriver release
          CHROMEDRIVER_RELEASE="${CHROME_VERSION_STRING%%.*}"

          CHROME_RELEASE="${CHROMEDRIVER_RELEASE}"

          if [[ $CHROME_RELEASE -lt 70 ]]; then
            # https://sites.google.com/a/chromium.org/chromedriver/downloads
            # https://chromedriver.storage.googleapis.com/2.40/notes.txt

            case $CHROME_RELEASE in
            69)
              CHROMEDRIVER_VERSION="2.44"
              ;;
            68)
              CHROMEDRIVER_VERSION="2.42"
              ;;
            67)
              CHROMEDRIVER_VERSION="2.41"
              ;;
            66)
              CHROMEDRIVER_VERSION="2.40"
              ;;
            65)
              CHROMEDRIVER_VERSION="2.38"
              ;;
            64)
              CHROMEDRIVER_VERSION="2.37"
              ;;
            63)
              CHROMEDRIVER_VERSION="2.36"
              ;;
            62)
              CHROMEDRIVER_VERSION="2.35"
              ;;
            61)
              CHROMEDRIVER_VERSION="2.34"
              ;;
            60)
              CHROMEDRIVER_VERSION="2.33"
              ;;
            59)
              CHROMEDRIVER_VERSION="2.32"
              ;;
            58)
              CHROMEDRIVER_VERSION="2.31"
              ;;
            57)
              CHROMEDRIVER_VERSION="2.29"
              ;;
            56)
              CHROMEDRIVER_VERSION="2.29"
              ;;
            55)
              CHROMEDRIVER_VERSION="2.28"
              ;;
            54)
              CHROMEDRIVER_VERSION="2.27"
              ;;
            53)
              CHROMEDRIVER_VERSION="2.26"
              ;;
            52)
              CHROMEDRIVER_VERSION="2.24"
              ;;
            51)
              CHROMEDRIVER_VERSION="2.23"
              ;;
            50)
              CHROMEDRIVER_VERSION="2.22"
              ;;
            49)
              CHROMEDRIVER_VERSION="2.22"
              ;;
            48)
              CHROMEDRIVER_VERSION="2.21"
              ;;
            47)
              CHROMEDRIVER_VERSION="2.21"
              ;;
            46)
              CHROMEDRIVER_VERSION="2.21"
              ;;
            45)
              CHROMEDRIVER_VERSION="2.20"
              ;;
            44)
              CHROMEDRIVER_VERSION="2.20"
              ;;
            43)
              CHROMEDRIVER_VERSION="2.20"
              ;;
            *)
              echo "Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver"
              exit 1
              ;;
            esac
          else
            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \
              "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE")
          fi

          # installation check
          if command -v chromedriver >/dev/null 2>&1; then
            if chromedriver --version | grep "$CHROMEDRIVER_VERSION" >/dev/null 2>&1; then
              echo "ChromeDriver $CHROMEDRIVER_VERSION is already installed"
              exit 0
            else
              echo "A different version of ChromeDriver is installed ($(chromedriver --version)); removing it"
              $SUDO rm -f "$(command -v chromedriver)"
            fi
          fi

          echo "ChromeDriver $CHROMEDRIVER_VERSION will be installed"

          # download chromedriver
          curl --silent --show-error --location --fail --retry 3 \
            --output chromedriver_$PLATFORM.zip \
            "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip"

          # setup chromedriver installation
          if command -v yum >/dev/null 2>&1; then
            yum install -y unzip >/dev/null 2>&1
          fi

          unzip "chromedriver_$PLATFORM.zip" >/dev/null 2>&1
          rm -rf "chromedriver_$PLATFORM.zip"

          $SUDO mv chromedriver "$ORB_PARAM_DRIVER_INSTALL_DIR"
          $SUDO chmod +x "$ORB_PARAM_DRIVER_INSTALL_DIR/chromedriver"

          # test/verify version
          if chromedriver --version | grep "$CHROMEDRIVER_VERSION" >/dev/null 2>&1; then
            echo "$(chromedriver --version) has been installed to $(command -v chromedriver)"
          else
            echo "Something went wrong; ChromeDriver could not be installed"
            exit 1
          fi
        environment:
          ORB_PARAM_DRIVER_INSTALL_DIR: /usr/local/bin
        name: Install ChromeDriver
    - checkout
    - restore_cache:
        key: yarn-lock-v7-{{ checksum "ui/yarn.lock" }}
        name: Restore yarn cache
    - run:
        command: |
          google-chrome --version
          chromedriver --version
        name: Check Chrome install
    - run:
        command: |
          cd ui
          yarn install
          npm rebuild node-sass
        name: Install UI dependencies
    - save_cache:
        key: yarn-lock-v7-{{ checksum "ui/yarn.lock" }}
        name: Save yarn cache
        paths:
        - ui/node_modules
  test-ui:
    docker:
    - environment:
        JOBS: 2
      image: docker.mirror.hashicorp.services/cimg/node:14.12-browsers'
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    resource_class: xlarge
    steps:
    - run:
        command: |
          case "$CIRCLE_BRANCH" in
          main|ui/*|backport/ui/*|release/*|merge*) ;;
          *) # If the branch being tested doesn't match one of the above patterns,
             # we don't need to run test-ui and can abort the job.
             circleci-agent step halt
             ;;
          esac

          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - run:
        command: |
          #!/bin/bash
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # installation check
          if uname -a | grep Darwin >/dev/null 2>&1; then
            if ls /Applications/*Google\ Chrome* >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is currently installed; replacing it"
                HOMEBREW_NO_AUTO_UPDATE=1 brew uninstall google-chrome >/dev/null 2>&1 || true
                $SUDO rm -rf /Applications/Google\ Chrome.app >/dev/null 2>&1 || true
              else
                echo "$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)is already installed"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          elif grep Alpine /etc/issue >/dev/null 2>&1; then
            if command -v chromium-browser >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(chromium-browser --version)is currently installed; replacing it"
                $SUDO apk del --force-broken-world chromium >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v chromium-browser)" >/dev/null 2>&1 || true
              else
                echo "$(chromium-browser --version)is already installed to $(command -v chromium-browser)"
                exit 0
              fi
            else
              echo "Google Chrome (via Chromium) is not currently installed; installing it"
            fi
          elif command -v yum >/dev/null 2>&1; then
            if command -v google-chrome >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(google-chrome --version)is currently installed; replacing it"
                $SUDO yum remove -y google-chrome-stable >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v google-chrome)" >/dev/null 2>&1 || true
              else
                echo "$(google-chrome --version)is already installed to $(command -v google-chrome)"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          else
            if command -v google-chrome >/dev/null 2>&1; then
              if [ "$ORB_PARAM_REPLACE_EXISTING" == "1" ]; then
                echo "$(google-chrome --version)is currently installed; replacing it"
                $SUDO apt-get -y --purge remove google-chrome-stable >/dev/null 2>&1 || true
                $SUDO rm -f "$(command -v google-chrome)" >/dev/null 2>&1 || true
              else
                echo "$(google-chrome --version)is already installed to $(command -v google-chrome)"
                exit 0
              fi
            else
              echo "Google Chrome is not currently installed; installing it"
            fi
          fi

          # install chrome
          if uname -a | grep Darwin >/dev/null 2>&1; then
            echo "Preparing Chrome installation for MacOS-based systems"
            # Universal MacOS .pkg with license pre-accepted: https://support.google.com/chrome/a/answer/9915669?hl=en
            CHROME_MAC_URL="https://dl.google.com/chrome/mac/stable/accept_tos%3Dhttps%253A%252F%252Fwww.google.com%252Fintl%252Fen_ph%252Fchrome%252Fterms%252F%26_and_accept_tos%3Dhttps%253A%252F%252Fpolicies.google.com%252Fterms/googlechrome.pkg"
            CHROME_TEMP_DIR="$(mktemp -d)"
            curl -L -o "$CHROME_TEMP_DIR/googlechrome.pkg" "$CHROME_MAC_URL"
            sudo /usr/sbin/installer -pkg "$CHROME_TEMP_DIR/googlechrome.pkg" -target /
            sudo rm -rf "$CHROME_TEMP_DIR"
            xattr -rc "/Applications/Google Chrome.app"
            echo '#!/usr/bin/env bash' >> google-chrome
            echo '/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome "$@"' >> google-chrome
            sudo mv google-chrome /usr/local/bin/
            sudo chmod +x /usr/local/bin/google-chrome
            # test/verify installation
            if google-chrome --version >/dev/null 2>&1; then
              echo "$(google-chrome --version)has been installed in the /Applications directory"
              echo "A shortcut has also been created at $(command -v google-chrome)"
              exit 0
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          elif command -v yum >/dev/null 2>&1; then
            echo "Preparing Chrome installation for RedHat-based systems"
            # download chrome
            if [[ "$ORB_PARAM_CHROME_VERSION" == "latest" ]]; then
              CHROME_URL="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm"
            else
              CHROME_URL="https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-$ORB_PARAM_CHROME_VERSION-1.x86_64.rpm"
            fi
            curl --silent --show-error --location --fail --retry 3 \
              --output google-chrome.rpm \
              "$CHROME_URL"
            curl --silent --show-error --location --fail --retry 3 \
              --output liberation-fonts.rpm \
              http://mirror.centos.org/centos/7/os/x86_64/Packages/liberation-fonts-1.07.2-16.el7.noarch.rpm
            $SUDO yum localinstall -y liberation-fonts.rpm \
              >/dev/null 2>&1
            $SUDO yum localinstall -y google-chrome.rpm \
              >/dev/null 2>&1
            rm -rf google-chrome.rpm liberation-fonts.rpm
          else
            # download chrome
            echo "Preparing Chrome installation for Debian-based systems"
            if [[ "$ORB_PARAM_CHROME_VERSION" == "latest" ]]; then
              ENV_IS_ARM=$(! dpkg --print-architecture | grep -q arm; echo $?)
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | $SUDO apt-key add -
              if [ "$ENV_IS_ARM" == "arm" ]; then
                echo "Installing Chrome for ARM64"
                $SUDO sh -c 'echo "deb [arch=arm64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              else
                echo "Installing Chrome for AMD64"
                $SUDO sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
              fi
              $SUDO apt-get update
              $SUDO apt-get install -y google-chrome-stable
            else
              # Google does not keep older releases in their PPA, but they can be installed manually. HTTPS should be enough to secure the download.
              wget --no-verbose -O /tmp/chrome.deb "https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${ORB_PARAM_CHROME_VERSION}-1_amd64.deb" \
                && $SUDO apt-get install -y /tmp/chrome.deb \
                && rm /tmp/chrome.deb
            fi
            $SUDO sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' "/opt/google/chrome/google-chrome"
          fi

          # test/verify installation
          if [[ "$ORB_PARAM_CHROME_VERSION" != "latest" ]]; then
            if google-chrome --version | grep "$ORB_PARAM_CHROME_VERSION" >/dev/null 2>&1; then
              :
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
          else
            if google-chrome --version >/dev/null 2>&1; then
              :
            else
              echo "Something went wrong; Google Chrome could not be installed"
              exit 1
            fi
            echo "$(google-chrome --version) has been installed to $(command -v google-chrome)"
            echo "Chrome: $ORB_PARAM_CHROME_VERSION" >>"${HOME}/.browser-versions"
          fi
        environment:
          ORB_PARAM_CHROME_VERSION: latest
          ORB_PARAM_REPLACE_EXISTING: false
        name: Install Google Chrome
    - run:
        command: |
          #!/bin/bash
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
          # determine_chrome_version
          if uname -a | grep Darwin >/dev/null 2>&1; then
            echo "System detected as MacOS"
            CHROME_VERSION="$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)"
            PLATFORM=mac64

          elif grep Alpine /etc/issue >/dev/null 2>&1; then
            apk update >/dev/null 2>&1 &&
              apk add --no-cache chromium-chromedriver >/dev/null

            # verify version
            echo "$(chromedriver --version) has been installed to $(command -v chromedriver)"

            exit 0
          else
            CHROME_VERSION="$(google-chrome --version)"
            PLATFORM=linux64
          fi

          CHROME_VERSION_STRING="$(echo "$CHROME_VERSION" | sed 's/.*Google Chrome //' | sed 's/.*Chromium //')"

          # print Chrome version
          echo "Installed version of Google Chrome is $CHROME_VERSION_STRING"

          # determine chromedriver release
          CHROMEDRIVER_RELEASE="${CHROME_VERSION_STRING%%.*}"

          CHROME_RELEASE="${CHROMEDRIVER_RELEASE}"

          if [[ $CHROME_RELEASE -lt 70 ]]; then
            # https://sites.google.com/a/chromium.org/chromedriver/downloads
            # https://chromedriver.storage.googleapis.com/2.40/notes.txt

            case $CHROME_RELEASE in
            69)
              CHROMEDRIVER_VERSION="2.44"
              ;;
            68)
              CHROMEDRIVER_VERSION="2.42"
              ;;
            67)
              CHROMEDRIVER_VERSION="2.41"
              ;;
            66)
              CHROMEDRIVER_VERSION="2.40"
              ;;
            65)
              CHROMEDRIVER_VERSION="2.38"
              ;;
            64)
              CHROMEDRIVER_VERSION="2.37"
              ;;
            63)
              CHROMEDRIVER_VERSION="2.36"
              ;;
            62)
              CHROMEDRIVER_VERSION="2.35"
              ;;
            61)
              CHROMEDRIVER_VERSION="2.34"
              ;;
            60)
              CHROMEDRIVER_VERSION="2.33"
              ;;
            59)
              CHROMEDRIVER_VERSION="2.32"
              ;;
            58)
              CHROMEDRIVER_VERSION="2.31"
              ;;
            57)
              CHROMEDRIVER_VERSION="2.29"
              ;;
            56)
              CHROMEDRIVER_VERSION="2.29"
              ;;
            55)
              CHROMEDRIVER_VERSION="2.28"
              ;;
            54)
              CHROMEDRIVER_VERSION="2.27"
              ;;
            53)
              CHROMEDRIVER_VERSION="2.26"
              ;;
            52)
              CHROMEDRIVER_VERSION="2.24"
              ;;
            51)
              CHROMEDRIVER_VERSION="2.23"
              ;;
            50)
              CHROMEDRIVER_VERSION="2.22"
              ;;
            49)
              CHROMEDRIVER_VERSION="2.22"
              ;;
            48)
              CHROMEDRIVER_VERSION="2.21"
              ;;
            47)
              CHROMEDRIVER_VERSION="2.21"
              ;;
            46)
              CHROMEDRIVER_VERSION="2.21"
              ;;
            45)
              CHROMEDRIVER_VERSION="2.20"
              ;;
            44)
              CHROMEDRIVER_VERSION="2.20"
              ;;
            43)
              CHROMEDRIVER_VERSION="2.20"
              ;;
            *)
              echo "Sorry, Google Chrome/Chromium version 43 or newer is required to use ChromeDriver"
              exit 1
              ;;
            esac
          else
            CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 3 \
              "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROMEDRIVER_RELEASE")
          fi

          # installation check
          if command -v chromedriver >/dev/null 2>&1; then
            if chromedriver --version | grep "$CHROMEDRIVER_VERSION" >/dev/null 2>&1; then
              echo "ChromeDriver $CHROMEDRIVER_VERSION is already installed"
              exit 0
            else
              echo "A different version of ChromeDriver is installed ($(chromedriver --version)); removing it"
              $SUDO rm -f "$(command -v chromedriver)"
            fi
          fi

          echo "ChromeDriver $CHROMEDRIVER_VERSION will be installed"

          # download chromedriver
          curl --silent --show-error --location --fail --retry 3 \
            --output chromedriver_$PLATFORM.zip \
            "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_$PLATFORM.zip"

          # setup chromedriver installation
          if command -v yum >/dev/null 2>&1; then
            yum install -y unzip >/dev/null 2>&1
          fi

          unzip "chromedriver_$PLATFORM.zip" >/dev/null 2>&1
          rm -rf "chromedriver_$PLATFORM.zip"

          $SUDO mv chromedriver "$ORB_PARAM_DRIVER_INSTALL_DIR"
          $SUDO chmod +x "$ORB_PARAM_DRIVER_INSTALL_DIR/chromedriver"

          # test/verify version
          if chromedriver --version | grep "$CHROMEDRIVER_VERSION" >/dev/null 2>&1; then
            echo "$(chromedriver --version) has been installed to $(command -v chromedriver)"
          else
            echo "Something went wrong; ChromeDriver could not be installed"
            exit 1
          fi
        environment:
          ORB_PARAM_DRIVER_INSTALL_DIR: /usr/local/bin
        name: Install ChromeDriver
    - checkout
    - restore_cache:
        key: yarn-lock-v7-{{ checksum "ui/yarn.lock" }}
        name: Restore yarn cache
    - attach_workspace:
        at: .
    - run:
        command: |
          google-chrome --version
          chromedriver --version
        name: Check Chrome install
    - run:
        command: |
          # Add ./bin to the PATH so vault binary can be run by Ember tests
          export PATH="${PWD}/bin:${PATH}"

          # Run Ember tests
          cd ui
          mkdir -p test-results/qunit
          yarn test:oss
        name: Test UI
    - store_artifacts:
        path: ui/test-results
    - store_test_results:
        path: ui/test-results
  build-go-dev:
    machine:
      image: ubuntu-2004:202201-02
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/home/circleci/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          mkdir $GOPATH/bin 2>/dev/null || { sudo mkdir $GOPATH/bin && sudo chmod 777 $GOPATH/bin; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"
          echo "export GOPROXY=off" >> "$BASH_ENV"
          echo "export GOPRIVATE=github.com/hashicorp/*" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - restore_cache:
        keys:
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        name: Restore exact go modules cache
    - attach_workspace:
        at: .
    - run:
        command: |
          # Move dev UI assets to expected location
          rm -rf ./pkg
          mkdir ./pkg

          # Build dev binary
          make ci-bootstrap dev
        name: Build dev binary
    - persist_to_workspace:
        paths:
        - bin
        root: .
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.17.11
    - GOFUMPT_VERSION: 0.2.1
    - GOTESTSUM_VERSION: 0.5.2
  test-go-remote-docker:
    docker:
    - image: docker.mirror.hashicorp.services/cimg/go:1.17.11
    resource_class: medium
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* || "$CIRCLE_BRANCH" = backport/docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - run:
        command: |
          git config --global url."git@github.com:".insteadOf https://github.com/
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - restore_cache:
        keys:
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        name: Restore exact go modules cache
    - run:
        command: |
          set -exo pipefail

          EXTRA_TAGS=
          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          *)       EXTRA_TAGS=deadlock;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Check all directories with a go.mod file
          modules=("." "api" "sdk")
          all_package_names=""

          for dir in "${modules[@]}"
          do
            pushd "$dir"
            # On its own line so that -e will fail the tests if we detect errors here.
            go list -test -json ./... > test-list.json
            # Split Go tests by prior test times.  If use_docker is true, only run
            # tests that depend on docker, otherwise only those that don't.
            # The appended true condition ensures the command will succeed if no packages are found
            if [ $USE_DOCKER == 1 ]; then
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            else
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            fi
            # Move back into root directory
            popd
            # Append the test packages into the global list, if any are found
            if [ -n "$package_names" ]; then
              all_package_names+=" ${package_names}"
            fi
          done

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # We don't want VAULT_LICENSE set when running Go tests, because that's
          # not what developers have in their environments and it could break some
          # tests; it would be like setting VAULT_TOKEN.  However some non-Go
          # CI commands, like the UI tests, shouldn't have to worry about licensing.
          # So we set VAULT_LICENSE in CI, and here we unset it.  Instead of
          # VAULT_LICENSE, we populate VAULT_LICENSE_CI, so that tests which want
          # an externally supplied license can opt-in to using it.
          export VAULT_LICENSE_CI="$VAULT_LICENSE"
          VAULT_LICENSE=

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi



            # Start a docker testcontainer to run the tests in
            docker run -d \
              -e TEST_DOCKER_NETWORK_ID \
              -e GOPRIVATE \
              -e DOCKER_CERT_PATH \
              -e DOCKER_HOST \
              -e DOCKER_MACHINE_NAME \
              -e DOCKER_TLS_VERIFY \
              -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer docker.mirror.hashicorp.services/cimg/go:1.17.11 \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/home/circleci/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            # Copy the downloaded modules inside the container.
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/pkg'
            docker cp "$(go env GOPATH)/pkg/mod" testcontainer:/home/circleci/go/pkg/mod

            docker exec -w /home/circleci/go/src/github.com/hashicorp/vault/ \
              -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              -e GOCACHE=/tmp/gocache \
              -e GO_TAGS \
              -e GOPROXY="off" \
              -e VAULT_LICENSE_CI \
              -e GOARCH=amd64 \
              testcontainer \
                gotestsum --format=short-verbose \
                  --junitfile test-results/go-test/results.xml \
                  --jsonfile test-results/go-test/results.json \
                  -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                  -timeout=60m \
                  -parallel=20 \
                   \
                  ${all_package_names}
          else
            GOARCH=amd64 \
              GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${all_package_names}
          fi
        environment:
          GOPRIVATE: github.com/hashicorp/*
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/home/circleci/go/src/github.com/hashicorp/vault/test-results .
          docker cp testcontainer:/tmp/gocache /tmp/go-cache
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
  fmt:
    machine:
      image: ubuntu-2004:202201-02
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/home/circleci/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          mkdir $GOPATH/bin 2>/dev/null || { sudo mkdir $GOPATH/bin && sudo chmod 777 $GOPATH/bin; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"
          echo "export GOPROXY=https://proxy.golang.org,direct" >> "$BASH_ENV"
          echo "export GOPRIVATE=github.com/hashicorp/*" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - run:
        command: |
          go install "mvdan.cc/gofumpt@v${GOFUMPT_VERSION}"
          make fmt
          if ! git diff --exit-code; then
            echo "Code has formatting errors. Run 'make fmt' to fix"
            exit 1
          fi
        name: make fmt
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.17.11
    - GOFUMPT_VERSION: 0.2.1
    - GOTESTSUM_VERSION: 0.5.2
  test-go-race:
    docker:
    - image: docker.mirror.hashicorp.services/cimg/go:1.17.11
    resource_class: xlarge
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* || "$CIRCLE_BRANCH" = backport/docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - run:
        command: |
          git config --global url."git@github.com:".insteadOf https://github.com/
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - restore_cache:
        keys:
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        name: Restore exact go modules cache
    - run:
        command: |
          set -exo pipefail

          EXTRA_TAGS=
          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          *)       EXTRA_TAGS=deadlock;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Check all directories with a go.mod file
          modules=("." "api" "sdk")
          all_package_names=""

          for dir in "${modules[@]}"
          do
            pushd "$dir"
            # On its own line so that -e will fail the tests if we detect errors here.
            go list -test -json ./... > test-list.json
            # Split Go tests by prior test times.  If use_docker is true, only run
            # tests that depend on docker, otherwise only those that don't.
            # The appended true condition ensures the command will succeed if no packages are found
            if [ $USE_DOCKER == 1 ]; then
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            else
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            fi
            # Move back into root directory
            popd
            # Append the test packages into the global list, if any are found
            if [ -n "$package_names" ]; then
              all_package_names+=" ${package_names}"
            fi
          done

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # We don't want VAULT_LICENSE set when running Go tests, because that's
          # not what developers have in their environments and it could break some
          # tests; it would be like setting VAULT_TOKEN.  However some non-Go
          # CI commands, like the UI tests, shouldn't have to worry about licensing.
          # So we set VAULT_LICENSE in CI, and here we unset it.  Instead of
          # VAULT_LICENSE, we populate VAULT_LICENSE_CI, so that tests which want
          # an externally supplied license can opt-in to using it.
          export VAULT_LICENSE_CI="$VAULT_LICENSE"
          VAULT_LICENSE=

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi



            # Start a docker testcontainer to run the tests in
            docker run -d \
              -e TEST_DOCKER_NETWORK_ID \
              -e GOPRIVATE \
              -e DOCKER_CERT_PATH \
              -e DOCKER_HOST \
              -e DOCKER_MACHINE_NAME \
              -e DOCKER_TLS_VERIFY \
              -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer docker.mirror.hashicorp.services/cimg/go:1.17.11 \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/home/circleci/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            # Copy the downloaded modules inside the container.
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/pkg'
            docker cp "$(go env GOPATH)/pkg/mod" testcontainer:/home/circleci/go/pkg/mod

            docker exec -w /home/circleci/go/src/github.com/hashicorp/vault/ \
              -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              -e GOCACHE=/tmp/gocache \
              -e GO_TAGS \
              -e GOPROXY="off" \
              -e VAULT_LICENSE_CI \
              -e GOARCH=amd64 \
              testcontainer \
                gotestsum --format=short-verbose \
                  --junitfile test-results/go-test/results.xml \
                  --jsonfile test-results/go-test/results.json \
                  -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                  -timeout=60m \
                  -parallel=20 \
                  -race \
                  ${all_package_names}
          else
            GOARCH=amd64 \
              GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${all_package_names}
          fi
        environment:
          GOPRIVATE: github.com/hashicorp/*
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
  test-go:
    docker:
    - image: docker.mirror.hashicorp.services/cimg/go:1.17.11
    resource_class: large
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* || "$CIRCLE_BRANCH" = backport/docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - run:
        command: |
          git config --global url."git@github.com:".insteadOf https://github.com/
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - restore_cache:
        keys:
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        name: Restore exact go modules cache
    - run:
        command: |
          set -exo pipefail

          EXTRA_TAGS=
          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          *)       EXTRA_TAGS=deadlock;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Check all directories with a go.mod file
          modules=("." "api" "sdk")
          all_package_names=""

          for dir in "${modules[@]}"
          do
            pushd "$dir"
            # On its own line so that -e will fail the tests if we detect errors here.
            go list -test -json ./... > test-list.json
            # Split Go tests by prior test times.  If use_docker is true, only run
            # tests that depend on docker, otherwise only those that don't.
            # The appended true condition ensures the command will succeed if no packages are found
            if [ $USE_DOCKER == 1 ]; then
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            else
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            fi
            # Move back into root directory
            popd
            # Append the test packages into the global list, if any are found
            if [ -n "$package_names" ]; then
              all_package_names+=" ${package_names}"
            fi
          done

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # We don't want VAULT_LICENSE set when running Go tests, because that's
          # not what developers have in their environments and it could break some
          # tests; it would be like setting VAULT_TOKEN.  However some non-Go
          # CI commands, like the UI tests, shouldn't have to worry about licensing.
          # So we set VAULT_LICENSE in CI, and here we unset it.  Instead of
          # VAULT_LICENSE, we populate VAULT_LICENSE_CI, so that tests which want
          # an externally supplied license can opt-in to using it.
          export VAULT_LICENSE_CI="$VAULT_LICENSE"
          VAULT_LICENSE=

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi



            # Start a docker testcontainer to run the tests in
            docker run -d \
              -e TEST_DOCKER_NETWORK_ID \
              -e GOPRIVATE \
              -e DOCKER_CERT_PATH \
              -e DOCKER_HOST \
              -e DOCKER_MACHINE_NAME \
              -e DOCKER_TLS_VERIFY \
              -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer docker.mirror.hashicorp.services/cimg/go:1.17.11 \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/home/circleci/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            # Copy the downloaded modules inside the container.
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/pkg'
            docker cp "$(go env GOPATH)/pkg/mod" testcontainer:/home/circleci/go/pkg/mod

            docker exec -w /home/circleci/go/src/github.com/hashicorp/vault/ \
              -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              -e GOCACHE=/tmp/gocache \
              -e GO_TAGS \
              -e GOPROXY="off" \
              -e VAULT_LICENSE_CI \
              -e GOARCH=amd64 \
              testcontainer \
                gotestsum --format=short-verbose \
                  --junitfile test-results/go-test/results.xml \
                  --jsonfile test-results/go-test/results.json \
                  -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                  -timeout=60m \
                  -parallel=20 \
                   \
                  ${all_package_names}
          else
            GOARCH=amd64 \
              GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${all_package_names}
          fi
        environment:
          GOPRIVATE: github.com/hashicorp/*
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
  semgrep:
    docker:
    - image: docker.mirror.hashicorp.services/alpine:3.13
    shell: /bin/sh
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          apk add --no-cache python3 py3-pip make
          python3 -m pip install --user semgrep==0.97.0
          export PATH="$HOME/.local/bin:$PATH"

          echo "$ semgrep --version"
          semgrep --version
        name: Setup Semgrep
        working_directory: ~/
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: "# Alpine images can't run the make file due to a bash requirement. Run\n# semgrep explicitly here. \nexport PATH=\"$HOME/.local/bin:$PATH\" \nsemgrep --error --include '*.go' --exclude 'vendor' -f tools/semgrep/ci .\n"
        name: Run Semgrep Rules
  pre-flight-checks:
    machine:
      image: ubuntu-2004:202201-02
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/home/circleci/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          mkdir $GOPATH/bin 2>/dev/null || { sudo mkdir $GOPATH/bin && sudo chmod 777 $GOPATH/bin; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"
          echo "export GOPROXY=https://proxy.golang.org,direct" >> "$BASH_ENV"
          echo "export GOPRIVATE=github.com/hashicorp/*" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - run:
        command: |
          export CCI_PATH=/tmp/circleci-cli/$CIRCLECI_CLI_VERSION
          mkdir -p $CCI_PATH
          NAME=circleci-cli_${CIRCLECI_CLI_VERSION}_${ARCH}
          URL=$BASE/v${CIRCLECI_CLI_VERSION}/${NAME}.tar.gz
          curl -sSL $URL \
            | tar --overwrite --strip-components=1 -xz -C $CCI_PATH "${NAME}/circleci"
          # Add circleci to the path for subsequent steps.
          echo "export PATH=$CCI_PATH:\$PATH" >> $BASH_ENV
          # Done, print some debug info.
          set -x
          . $BASH_ENV
          which circleci
          circleci version
        environment:
          ARCH: linux_amd64
          BASE: https://github.com/CircleCI-Public/circleci-cli/releases/download
        name: Install CircleCI CLI
    - run:
        command: |
          set -x
          . $BASH_ENV
          make ci-verify
        name: Verify CircleCI
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - run:
        command: |
          git config --global url."git@github.com:".insteadOf https://github.com/
    - restore_cache:
        keys:
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}
        - v1.5-{{checksum "go.sum"}}
        name: Restore closest matching go modules cache
    - run:
        command: |
          # set GOPATH explicitly to download to the right cache
          export GOPATH=$HOME/go
          # go list ./... forces downloading some additional versions of modules that 'go mod
          # download' misses. We need this because we make use of go list itself during
          # code generation in later builds that rely on this module cache.
          go list ./...
          go mod download -json
          ( cd sdk && go mod download -json; )
          ( cd api && go mod download -json; )
        name: go mod download
    - run:
        command: |
          git --no-pager diff --exit-code || {
            echo "ERROR: Files modified by go mod download, see above."
            exit 1
          }
        name: Verify downloading modules did not modify any files
    - save_cache:
        key: v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        name: Save go modules cache
        paths:
        - /home/circleci/go/pkg/mod
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.17.11
    - GOFUMPT_VERSION: 0.2.1
    - GOTESTSUM_VERSION: 0.5.2
  test-go-race-remote-docker:
    docker:
    - image: docker.mirror.hashicorp.services/cimg/go:1.17.11
    resource_class: medium
    working_directory: /home/circleci/go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* || "$CIRCLE_BRANCH" = backport/docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - run:
        command: |
          git config --global url."git@github.com:".insteadOf https://github.com/
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - restore_cache:
        keys:
        - v1.5-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
        name: Restore exact go modules cache
    - run:
        command: |
          set -exo pipefail

          EXTRA_TAGS=
          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          *)       EXTRA_TAGS=deadlock;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Check all directories with a go.mod file
          modules=("." "api" "sdk")
          all_package_names=""

          for dir in "${modules[@]}"
          do
            pushd "$dir"
            # On its own line so that -e will fail the tests if we detect errors here.
            go list -test -json ./... > test-list.json
            # Split Go tests by prior test times.  If use_docker is true, only run
            # tests that depend on docker, otherwise only those that don't.
            # The appended true condition ensures the command will succeed if no packages are found
            if [ $USE_DOCKER == 1 ]; then
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            else
              package_names=$(< test-list.json jq -r 'select(.Deps != null) |
                  select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                  .ForTest | select(. != null)' |
                  sort -u | grep -v vault/integ | circleci tests split --split-by=timings --timings-type=classname || true)
            fi
            # Move back into root directory
            popd
            # Append the test packages into the global list, if any are found
            if [ -n "$package_names" ]; then
              all_package_names+=" ${package_names}"
            fi
          done

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # We don't want VAULT_LICENSE set when running Go tests, because that's
          # not what developers have in their environments and it could break some
          # tests; it would be like setting VAULT_TOKEN.  However some non-Go
          # CI commands, like the UI tests, shouldn't have to worry about licensing.
          # So we set VAULT_LICENSE in CI, and here we unset it.  Instead of
          # VAULT_LICENSE, we populate VAULT_LICENSE_CI, so that tests which want
          # an externally supplied license can opt-in to using it.
          export VAULT_LICENSE_CI="$VAULT_LICENSE"
          VAULT_LICENSE=

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi



            # Start a docker testcontainer to run the tests in
            docker run -d \
              -e TEST_DOCKER_NETWORK_ID \
              -e GOPRIVATE \
              -e DOCKER_CERT_PATH \
              -e DOCKER_HOST \
              -e DOCKER_MACHINE_NAME \
              -e DOCKER_TLS_VERIFY \
              -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer docker.mirror.hashicorp.services/cimg/go:1.17.11 \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/home/circleci/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            # Copy the downloaded modules inside the container.
            docker exec testcontainer sh -c 'mkdir -p /home/circleci/go/pkg'
            docker cp "$(go env GOPATH)/pkg/mod" testcontainer:/home/circleci/go/pkg/mod

            docker exec -w /home/circleci/go/src/github.com/hashicorp/vault/ \
              -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              -e GOCACHE=/tmp/gocache \
              -e GO_TAGS \
              -e GOPROXY="off" \
              -e VAULT_LICENSE_CI \
              -e GOARCH=amd64 \
              testcontainer \
                gotestsum --format=short-verbose \
                  --junitfile test-results/go-test/results.xml \
                  --jsonfile test-results/go-test/results.json \
                  -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                  -timeout=60m \
                  -parallel=20 \
                  -race \
                  ${all_package_names}
          else
            GOARCH=amd64 \
              GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS} ${EXTRA_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${all_package_names}
          fi
        environment:
          GOPRIVATE: github.com/hashicorp/*
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/home/circleci/go/src/github.com/hashicorp/vault/test-results .
          docker cp testcontainer:/tmp/gocache /tmp/go-cache
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
workflows:
  ci:
    jobs:
    - pre-flight-checks
    - fmt
    - install-ui-dependencies:
        requires:
        - pre-flight-checks
    - build-go-dev:
        requires:
        - pre-flight-checks
    - test-ui:
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-go:
        requires:
        - pre-flight-checks
    - test-go-remote-docker:
        requires:
        - pre-flight-checks
    - test-go-race:
        requires:
        - pre-flight-checks
    - test-go-race-remote-docker:
        requires:
        - pre-flight-checks
    - semgrep:
        requires:
        - pre-flight-checks
  version: 2
